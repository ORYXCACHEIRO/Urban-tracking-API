using AutoMapper;
using UTAPI.Models;
using UTAPI.Requests.Entity;
using UTAPI.Requests.FavRoute;
using UTAPI.Requests.EntityDriver;
using UTAPI.Requests.Region;
using UTAPI.Requests.Route;
using UTAPI.Requests.RouteLine;
using UTAPI.Requests.RouteStop;
using UTAPI.Requests.Stop;
using UTAPI.Requests.User;
using UTAPI.Requests.DriverRoute;
using UTAPI.Requests.PriceTable;
using UTAPI.Requests.PriceTableContent;
using UTAPI.Requests.Auth;

namespace UTAPI.Utils
{
    public class AutoMapperProfile : Profile
    {
        public AutoMapperProfile()
        {

            //---------------Auth-----------------

            CreateMap<Register, User>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            //---------------------------------------

            //------------User---------------------

            CreateMap<PostUser, User>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.Active, opt => opt.Ignore());

            CreateMap<PatchUser, User>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore());

            CreateMap<User, ListUser>();

            CreateMap<User, OneUser>();

            //----------------Route----------------------------------

            CreateMap<PostRoute, Models.Route>()
              .ForMember(dest => dest.Id, opt => opt.Ignore())        // Ignore ID (will be generated by the DB)

              .ForMember(dest => dest.Active, opt => opt.MapFrom(src => true));  // Set Active to true by default

            CreateMap<Models.Route, ListRoute>();

            CreateMap<Models.Route, OneRoute>();


            //--------------------------------------------------

            //------------ Entity ---------------------

            // Mapeamento de PostEntity para Entity
            CreateMap<PostEntity, Entity>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.Active, opt => opt.Ignore());

            // Mapeamento de PatchEntity para Entity
            CreateMap<PatchEntity, Entity>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de Entity para ListEntity
            CreateMap<Entity, ListEntity>();

            // Mapeamento de Entity para OneEntity
            CreateMap<Entity, OneEntity>();

            //--------------------------------------------------

            //------------ Region ---------------------

            // Mapeamento de PostRegion para Region
            CreateMap<PostRegion, Region>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de PatchRegion para Region
            CreateMap<PatchRegion, Region>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de Region para ListRegion
            CreateMap<Region, ListRegion>();

            // Mapeamento de Region para OneRegion
            CreateMap<Region, OneRegion>();

            //------------ FavRoutes ---------------------

            // Mapeamento de PostFavRoute para FavRoute
            CreateMap<PostFavRoute, FavRoute>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de Region para ListRegion
            CreateMap<FavRoute, GetFavRouteByUserId>();

            //--------------------------------------------------

            //------------ PRICETABLE ---------------------

            // Mapeamento de PostFavRoute para FavRoute
            CreateMap<PostPriceTable, PriceTable>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de Region para ListRegion
            CreateMap<PriceTable, ListPriceTable>();

            //--------------------------------------------------

            //------------ PRICETABLECONTENT ---------------------

            // Mapeamento de PostFavRoute para FavRoute
            CreateMap<PostPriceTableContent, PriceTableContent>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());

            // Mapeamento de Region para ListRegion
            CreateMap<PriceTableContent, ListPriceTableContent>();

            //--------------------------------------------------


            // --------------- Entity Driver -----------------
            CreateMap<PostEntityDriver, EntityDriver>()
                .ForMember(dest => dest.UserId, opt => opt.MapFrom(src => src.UserId));

            // Mapeamento de Region para ListRegion
            CreateMap<EntityDriver, ListEntityDriver>()
                .ForMember(dest => dest.Username, opt => opt.MapFrom(src => src.User.Name));


            //--------------------------------------------------

            //------------ Stop ---------------------

            // Mapeamento de PostStop para Stop
            CreateMap<PostStop, Stop>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());  // Ignora o Id se for gerado automaticamente

            // Mapeamento de PatchStop para Stop
            CreateMap<PatchStop, Stop>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());  // Ignora o Id

            // Mapeamento de Stop para ListStop
            CreateMap<Stop, ListStop>();

            // Mapeamento de Stop para OneStop
            CreateMap<Stop, OneStop>();

            //-----------------Audit-----------------------

            CreateMap<Audit, Audit>();

            //--------------------------------------------

            //-----------------Session-----------------------

            CreateMap<Session, Session>();

            //--------------------------------------------

            //------------ RouteLine ---------------------

            // Mapeamento de PostRouteLine para RouteLine
            CreateMap<PostRouteLine, RouteLine>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());  // Ignora o ID se for gerado automaticamente

            // Mapeamento de PatchRouteLine para RouteLine
            CreateMap<PatchRouteLine, RouteLine>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());  // Ignora o ID

            // Mapeamento de RouteLine para ListRouteLine
            CreateMap<RouteLine, ListRouteLine>();

            // Mapeamento de RouteLine para OneRouteLine
            CreateMap<RouteLine, OneRouteLine>();

            //------------ RouteStop ---------------------

            // Mapeamento de AddStopToRouteRequest para RouteStop
            CreateMap<PostRouteStop, RouteStop>()
                .ForMember(dest => dest.Id, opt => opt.Ignore());  // Ignora o ID se for gerado automaticamente

            // Mapeamento de RouteStop para ListRouteStop
            CreateMap<RouteStop, ListRouteStop>()
                .ForMember(dest => dest.RouteName, opt => opt.MapFrom(src => src.Route.Name))
                .ForMember(dest => dest.StopName, opt => opt.MapFrom(src => src.Stop.Name));

            //------------ DriverRoute ---------------------

            // Mapeamento de PostDriverRoute para DriverRoute
            CreateMap<PostDriverRoute, DriverRoute>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()); // Ignora o ID se for gerado automaticamente

            // Mapeamento de DriverRoute para ListDriverRoute
            CreateMap<DriverRoute, ListDriverRoute>()
                .ForMember(dest => dest.Username, opt => opt.MapFrom(src => src.User.Name));

        }

    }
}
